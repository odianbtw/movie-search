openapi: 3.1.0

info:
  title: Movie Search
  description: This is OpenAPI specification for the Movie Search Project
  version: 1.0.0
servers:
  - url: 'https://localhost/api/v1'
tags:
  - name: Genres
    description: Access to all existing genres
  - name: Countries
    description: Access to all existing countries
  - name: Production Studios
    description: Access to all existing production studios
  - name: Movies
    description: Access to all existing movies
  - name: People
    description: Access to all people connected with movie industry

paths:
  /genres:
    get:
      tags:
        - Genres
      summary: Get all existing genres.
      description: Get all existing genres.
      operationId: getGenres
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /countries:
    get:
      tags:
        - Countries
      summary: Get all existing countries
      description: Get all existing countries
      operationId: getCountries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /studios:
    get:
      tags:
        - Production Studios
      summary: Get all production studios.
      description: Get all production studios. Production Studios - studios that film movies. For example (Warner Brothers, Universal and etc.)
      parameters:
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
        - $ref: '#/components/parameters/NameParam'
      operationId: getProductionStudios
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponseBase'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductionStudio'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Production Studios
      summary: Add new production studio.
      description: Add new production studio.
      operationId: addProductionStudio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductionStudioRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionStudio'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Production studio with this name already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /studios/{studioId}:
    get:
      tags:
        - Production Studios
      summary: Get information about production studio by id.
      description: Get information about production studio by id.
      operationId: getProductionStudioById
      parameters:
        - name: studioId
          in: path
          description: ID of production studio to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionStudio'
        '404':
          description: Production studio with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Production Studios
      summary: Update information about production studio.
      description: Update information about production studio.
      operationId:  updateProductionStudio
      parameters:
        - name: studioId
          in: path
          description: ID of production studio to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductionStudio'
      responses:
        '202':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionStudio'
        '404':
          description: Production Studio with id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Production studio with this name already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /studios/{studioId}/movies:
    get:
      tags:
        - Production Studios
      summary: Get all movies filmed by production studio.
      description: Get all movies filmed by production studio.
      operationId: getPStudioMovies
      parameters:
        - name: studioId
          in: path
          description: ID of studio to be searching for movies
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
        - $ref: '#/components/parameters/NameParam'
        - $ref: '#/components/parameters/GenreParam'
        - $ref: '#/components/parameters/ScoreFromParam'
        - $ref: '#/components/parameters/ScoreToParam'
        - $ref: '#/components/parameters/YearFromParam'
        - $ref: '#/components/parameters/YearToParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponseBase'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Movie'
        '404':
          description: Production studio with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /movies:
    get:
      tags:
        - Movies
      summary: Get existing movies.
      description: Get existing movies.
      operationId: getAllMovies
      parameters:
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
        - $ref: '#/components/parameters/NameParam'
        - $ref: '#/components/parameters/GenreParam'
        - $ref: '#/components/parameters/CountryParam'
        - $ref: '#/components/parameters/ScoreFromParam'
        - $ref: '#/components/parameters/ScoreToParam'
        - $ref: '#/components/parameters/YearFromParam'
        - $ref: '#/components/parameters/YearToParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponseBase'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Movie'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Movies
      summary: Add new movie.
      description: Add new movie.
      operationId: addNewMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The same movie already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



  /movies/{movieId}:
    get:
      tags:
        - Movies
      summary: Get movie by it's id.
      description: Get movie by it's id.
      operationId: getMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of movie to be searching for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Movies
      summary: Update information about movie.
      description: Update information about movie.
      operationId: updateMovie
      parameters:
        - name: movieId
          in: path
          description: ID of movie to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieUpdateRequest'
      responses:
        '202':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie with id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Movie with this name already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies/{movieId}/crew:
    get:
      tags:
        - Movies
      summary: Get existing people that participated in movie creation.
      description: Get existing people that participated in movie creation.
      operationId: getMovieCrew
      parameters:
        - name: movieId
          in: path
          description: ID of movie to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieCredit'
        '404':
          description: Movie with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Movies
      summary: Add people to the crew of the movie.
      description: Add people to the crew of the movie.
      operationId: addCrewMember
      parameters:
        - name: movieId
          in: path
          description: ID of movie to add people
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MovieCreditRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieCredit'
        '404':
          description: Movie with id not found or the person that suppose to be add to the movie crew doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Person with same role in the crew already exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /movies/{movieId}/awards:
    get:
      tags:
        - Movies
      summary: Get existing awards that movie was awarded with.
      description: Get existing awards that movie was awarded with.
      operationId: getMovieAwards
      parameters:
        - name: movieId
          in: path
          description: ID of movie to find awards
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Award'
        '404':
          description: Movie with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Movies
      summary: Add new award to the movie.
      description: Add new award to the movie.
      operationId: addNewAwardToMovie
      parameters:
        - name: movieId
          in: path
          description: ID of movie to add award
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Award'
        '404':
          description: Movie with id not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The same award already exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /people:
    get:
      tags:
        - People
      summary: Get existing people that connected to the movie industry.
      description: Get existing people that connected to the movie industry.
      operationId: getAllPeople
      parameters:
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
        - $ref: '#/components/parameters/NameParam'
        - $ref: '#/components/parameters/CountryParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponseBase'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Person'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - People
      summary: Add new person.
      description: Add new person.
      operationId: addNewPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The same person already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /people/{personId}:
    get:
      tags:
        - People
      summary: Get person by it's id.
      description: Get person by it's id.
      operationId: getPersonById
      parameters:
        - name: personId
          in: path
          description: ID of person to be searching for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - People
      summary: Update information about person.
      description: Update information about person.
      operationId: updatePerson
      parameters:
        - name: personId
          in: path
          description: ID of person to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonUpdateRequest'
      responses:
        '202':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person with id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The same person already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/movies:
    get:
      tags:
        - People
      summary: Get all movies where person participated.
      description: Get all movies where person participated.
      operationId: getPersonMovies
      parameters:
        - name: personId
          in: path
          description: ID of person to be searching for movies
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonMovie'
        '404':
          description: Person with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /people/{personId}/awards:
    get:
      tags:
        - People
      summary: Get existing awards that person was awarded with.
      description: Get existing awards that person was awarded with.
      operationId: getPersonAwards
      parameters:
        - name: personId
          in: path
          description: ID of person to find awards
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Award'
        '404':
          description: Person with this id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - People
      summary: Add new award to the person.
      description: Add new award to the person.
      operationId: addNewAwardToPerson
      parameters:
        - name: personId
          in: path
          description: ID of person to add award
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Award'
        '404':
          description: Person with id not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The same award already exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



components:
  schemas:
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        name:
          type: string
          example: Horror
    Country:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Germany
    Error:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 404
        message:
          type: string
          example: Movie with this id not found
        timestamp:
          description: Time when error occurred in UTC±0:00
          type: string
          format: date-time
          example: "2025-06-11T10:15:30Z"
    ProductionStudio:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        name:
          type: string
          example: Paramount Pictures
        logoUrl:
          type: string
          format: uri
          example: https://moviesearch.media/logos/paramount_pictures_logo.jpg
        country:
          $ref: '#/components/schemas/Country'
        description:
          type: string
          example: Paramount Pictures is an American film production and distribution company and the flagship namesake subsidiary of Paramount Global. It is the sixth-oldest film studio in the world, the second-oldest film studio in the United States.
    ProductionStudioRequest:
      type: object
      required:
        - name
        - logoUrl
        - countryId
        - description
      properties:
        name:
          type: string
          example: Paramount Pictures
        logoUrl:
          type: string
          format: uri
          example: https://moviesearch.media/logos/paramount_pictures_logo.jpg
        countryId:
          type: integer
          format: int 32
          example: 1
        description:
          type: string
          example: Paramount Pictures is an American film production and distribution company and the flagship namesake subsidiary of Paramount Global. It is the sixth-oldest film studio in the world, the second-oldest film studio in the United States.
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5613
        name:
          type: string
          example: Fight Club
        slogan:
          type: string 
          example: You do not talk about Fight Club
        description:
          type: string
          example: An insomniac office worker and a devil-may-care soap maker form an underground fight club that evolves into much more.
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/Country'
        productionStudios:
          type: array
          items:
            $ref: '#/components/schemas/ProductionStudio'
        score:
          type: number
          format: float
          minimum: 0.0
          maximum: 10.0
          example: 7.8
        coverUrl:
          type: string
          format: uri
          example: https://moviesearch.media/cover/fight_club.jpg
        trailerUrl:
          type: string
          format: uri
          example: https://youtu.be/BdJKm16Co6M?si=sY0RzPY-_H4wNSPE
        releaseDate: 
          type: string
          format: date
          example: "2025-06-11"
        durationTime:
          description: Duration of movie in minutes.
          type: integer
          format: int32
          minimum: 0
          example: 127
        movieType:
          type: string
          default: MOVIE
          enum:
            - MOVIE
            - SERIES
          example: MOVIE
        movieRating:
          type: string
          default: UNRATED
          enum:
            - G
            - PG
            - PG-13
            - R
            - NC_17
            - UNRATED
          example: NC_17

    MovieRequest:
      type: object
      properties:
        name:
          type: string
          example: Fight Club
        slogan:
          type: string
          example: You do not talk about Fight Club
        description:
          type: string
          example: An insomniac office worker and a devil-may-care soap maker form an underground fight club that evolves into much more.
        genreIds:
          type: array
          description: List of genre IDs the movie belongs to
          items:
            type: integer
            format: int64
          example: [ 1, 3, 7 ]
        countryIds:
          type: array
          description: List of country IDs related to the movie (e.g., production countries)
          items:
            type: integer
            format: int64
          example: [ 2, 5 ]
        productionStudioIds:
          type: array
          description: List of production studio IDs involved in the movie
          items:
            type: integer
            format: int64
          example: [ 4, 9 ]
        coverUrl:
          type: string
          format: uri
          example: https://moviesearch.media/cover/fight_club.jpg
        trailerUrl:
          type: string
          format: uri
          example: https://youtu.be/BdJKm16Co6M?si=sY0RzPY-_H4wNSPE
        releaseDate:
          type: string
          format: date
          example: "2025-06-11"
        durationTime:
          description: Duration of movie in minutes.
          type: integer
          format: int32
          minimum: 0
          example: 127
        movieType:
          type: string
          default: MOVIE
          enum:
            - MOVIE
            - SERIES
          example: MOVIE
        movieRating:
          type: string
          default: UNRATED
          enum:
            - G
            - PG
            - PG-13
            - R
            - NC_17
            - UNRATED
          example: NC_17

    MovieUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5613
        name:
          type: string
          example: Fight Club
        slogan:
          type: string
          example: You do not talk about Fight Club
        description:
          type: string
          example: An insomniac office worker and a devil-may-care soap maker form an underground fight club that evolves into much more.
        genreIds:
          type: array
          description: List of genre IDs the movie belongs to
          items:
            type: integer
            format: int64
          example: [ 1, 3, 7 ]
        countryIds:
          type: array
          description: List of country IDs related to the movie (e.g., production countries)
          items:
            type: integer
            format: int64
          example: [ 2, 5 ]
        productionStudioIds:
          type: array
          description: List of production studio IDs involved in the movie
          items:
            type: integer
            format: int64
          example: [ 4, 9 ]
        coverUrl:
          type: string
          format: uri
          example: https://moviesearch.media/cover/fight_club.jpg
        trailerUrl:
          type: string
          format: uri
          example: https://youtu.be/BdJKm16Co6M?si=sY0RzPY-_H4wNSPE
        releaseDate:
          type: string
          format: date
          example: "2025-06-11"
        durationTime:
          description: Duration of movie in minutes.
          type: integer
          format: int32
          minimum: 0
          example: 127
        movieType:
          type: string
          default: MOVIE
          enum:
            - MOVIE
            - SERIES
          example: MOVIE
        movieRating:
          type: string
          default: UNRATED
          enum:
            - G
            - PG
            - PG-13
            - R
            - NC_17
            - UNRATED
          example: NC_17

    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 432
        name:
          type: string
          example: Brad Pitt
        biography:
          type: string
          example: William Bradley Pitt is an American actor and film producer. In a film career spanning more than thirty years, Pitt has received numerous accolades, including two Academy Awards, two British Academy Film Awards, two Golden Globe Awards, and a Primetime Emmy Award.
        country:
          $ref: '#/components/schemas/Country'
        birthDate:
          type: string
          format: date
          example: "2025-06-11"
        photoUrl:
          type: string
          format: uri
          example: https://moviesearch.media/photos/brad_pitt.jpg
        movieRoles:
          type: array
          description: The type of activity that the person does in the movie industry. For example, Brad Pitt is an actor and producer.
          items:
            type: string
            enum:
              - ACTOR
              - DIRECTOR
              - PRODUCER
              - WRITER
              - CINEMATOGRAPHER
              - EDITOR
              - COMPOSER
          example: ["ACTOR", "PRODUCER"]

    PersonRequest:
      type: object
      properties:
        name:
          type: string
          example: Brad Pitt
        biography:
          type: string
          example: William Bradley Pitt is an American actor and film producer. In a film career spanning more than thirty years, Pitt has received numerous accolades, including two Academy Awards, two British Academy Film Awards, two Golden Globe Awards, and a Primetime Emmy Award.
        countryId:
          type: integer
          format: int32
          example: 1
        birthDate:
          type: string
          format: date
          example: "2025-06-11"
        photoUrl:
          type: string
          format: uri
          example: https://moviesearch.media/photos/brad_pitt.jpg

    PersonUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 432
        name:
          type: string
          example: Brad Pitt
        biography:
          type: string
          example: William Bradley Pitt is an American actor and film producer. In a film career spanning more than thirty years, Pitt has received numerous accolades, including two Academy Awards, two British Academy Film Awards, two Golden Globe Awards, and a Primetime Emmy Award.
        countryId:
          type: integer
          format: int32
          example: 1
        birthDate:
          type: string
          format: date
          example: "2025-06-11"
        photoUrl:
          type: string
          format: uri
          example: https://moviesearch.media/photos/brad_pitt.jpg


    MovieCredit:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 432
        person:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 242
            name:
              type: string
              example: Brad Pitt
            photoUrl:
              type: string
              format: uri
              example: https://moviesearch.media/photos/brad_pitt.jpg
        role:
          type: string
          default: ACTOR
          enum:
            - ACTOR
            - DIRECTOR
            - PRODUCER
            - WRITER
            - CINEMATOGRAPHER
            - EDITOR
            - COMPOSER
          example: ACTOR

    MovieCreditRequest:
      type: object
      properties:
        personId:
          type: integer
          format: int64
          example: 232
        role:
          type: string
          default: ACTOR
          enum:
            - ACTOR
            - DIRECTOR
            - PRODUCER
            - WRITER
            - CINEMATOGRAPHER
            - EDITOR
            - COMPOSER
          example: ACTOR

    PersonMovie:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
          example: 142
        movieName:
          type: string
          example: Fight Club
        movieScore:
          type: number
          format: float
          minimum: 0.0
          maximum: 10.0
          example: 7.8
        movieCoverUrl:
          type: string
          format: uri
          example: https://moviesearch.media/cover/fight_club.jpg
        roles:
          type: array
          description: The type of activity that the person does in the movie. For example, Brad Pitt is an actor in movie Fight Club.
          items:
            type: string
            enum:
              - ACTOR
              - DIRECTOR
              - PRODUCER
              - WRITER
              - CINEMATOGRAPHER
              - EDITOR
              - COMPOSER
          example: ["ACTOR"]


    Award:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 142
        name:
          type: string
          example: Oscar
        description:
          type: string
          example: Best visual effects
        awardedAt:
          type: string
          format: date
          example: "2025-06-11"
        result:
          type: string
          default: WINNER
          enum:
            - WINNER
            - NOMINEE
          example: WINNER
        logoUrl:
          type: string
          format: uri
          example: https://moviesearch.media/logo/oscar_logo.jpg

    AwardRequest:
      type: object
      properties:
        name:
          type: string
          example: Oscar
        description:
          type: string
          example: Best visual effects
        awardedAt:
          type: string
          format: date
          example: "2025-06-11"
        result:
          type: string
          default: WINNER
          enum:
            - WINNER
            - NOMINEE
          example: WINNER
        logoUrl:
          type: string
          format: uri
          example: https://moviesearch.media/logo/oscar_logo.jpg

    PaginatedResponseBase:
      type: object
      properties:
        totalItems:
          type: integer
          format: int64
          example: 142
        totalPages:
          type: integer
          format: int32
          example: 12
        currentPage:
          type: integer
          format: int32
          example: 2
        pageSize:
          type: integer
          format: int32
          example: 20

  parameters:
    SizeParam:
      name: size
      in: query
      description: Parameter for pagination. This parameter sets the size of response input.
      required: false
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
#      explode: true
    PageParam:
      name: page
      in: query
      description: Parameter for pagination. This parameter sets the page of response input.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    SortParam:
      name: sort
      in: query
      description: Parameter for sorting. This parameter sets field to sort by.
      required: false
      schema:
        type: string
        example: name
    OrderParam:
      name: order
      in: query
      description: Parameter for sorting. This parameter sets the order to sort by.
      required: false
      schema:
        type: string
        default: asc
        enum:
          - asc
          - desc
    NameParam:
      name: name
      in: query
      description: Parameter for searching. This parameter sets the name to be searching by. For example (?name=Inception) it's going to search all movies or actors that have 'Inception' in name
      required: false
      schema:
        type: string
        example: Inception
    GenreParam:
      name: genreId
      in: query
      description: Parameter for filtering movies. This parameter sets the genres id to be searching by.
      required: false
      schema:
        type: array
        items:
          type: integer
        example: [1,5,9]
      style: form
      explode: true
    CountryParam:
      name: countryId
      in: query
      description: Parameter for filtering movies. This parameter sets the countries to be searching by.
      required: false
      schema:
        type: array
        items:
          type: integer
        uniqueItems: true
        example: [32,11]
      style: form
      explode: true
    ScoreFromParam:
      name: scoreFrom
      in: query
      description: Parameter for filtering movies. This parameter sets the min movie score to be searching by.
      required: false
      schema:
        type: number
        format: float
        minimum: 0.0
        maximum: 10.0
        example: 7.8
    ScoreToParam:
      name: scoreTo
      in: query
      description: Parameter for filtering movies. This parameter sets the max movie score to be searching by.
      required: false
      schema:
        type: number
        format: float
        minimum: 0.0
        maximum: 10.0
        example: 8.8
    YearFromParam:
      name: yearFrom
      in: query
      description: Parameter for filtering movies. This parameter sets the min year when movie was filmed to be searching by.
      required: false
      schema:
        type: integer
        minimum: 1900
        example: 1999
    YearToParam:
      name: yearTo
      in: query
      description: Parameter for filtering movies. This parameter sets the max year when movie was filmed to be searching by.
      required: false
      schema:
        type: integer
        minimum: 1900
        example: 1999
